variables

a = 10

a -> variable
= -> assignment operator
10 -> object(int)

Dynamically typed language -> python, javascript
statically type language -> java, c, c++

print()
type()

data type:
===========
numeric:
---------
1.int
2.float
3.complex 

text:
------
4.string(str) - we should enclose them in double quotes/single quotes/triple quotes
str -> sequence of characters.

5.bool -> True(1), False(0)
note: True(capital T) False(capital F)
Python is a case sensitve.

note:
-------
we can add int and bool.
internally python treats -> True as 1, Flase as 0

6.Range()
7.List
8.Tuple
9.Set
10.Dict
11.None


example:
------------
a = 10
b = 56.9
c = 2 + 8j

print(type(a))
print(type(b))
print(type(c))

o/p:
-----
<class 'int'>
<class 'float'>
<class 'complex'>

Identifiers:
---------------
names are called as Identifiers in python.
it can be a variable name, function name, module name, class name.

1.alphabets, numbers and underscore(_)
2.other than obove mentioned , we are not allowed to have in a identifier.
3.we can't have numbers at starting of an identifier.
4.we can't have keywords(reserved words) for identifiers.


comments:(ctrl + /)
---------------------
comments are for used for documentation purpose.
inactive code.

# -> place # at starting of the line.
""" data to be commmented """ 


input()
--------
to take input from the console.
this function always input as "str", it is programmers responsibilty to convert it into required data type.

print()
---------
to print on to the console.
default sep is <space>
default end is <new line>


type convertions:
------------------
to str
-------
int        -> possible
float               -> possible
complex             -> possible
bool                -> possible

to int
--------
str  -> only base 10 (numeric strings) -> possible
float -> possible(we will lose precision)
complex -> not possible
bool -> possible(True - 1, False - o)

to float
---------
bool -> possible (True - 1.0, False - 0.0)
int -> possible (45 -> 45.0)
complex -> not possible
str -> only floating types (decimal strings) -> possible

to bool
--------
int -> possible (any number(+ve or -ve) to bool except zero - True, zero - false)
float -> same as above
string -> olny empty string - false, 
note: spaces are also characters in programming. So, spaces are not empty strings.
complex -> only  0+0j -> false, any other complex numbers -> true


to complex:
------------
int -> 78 -> 78+0j
float -> 56.88 -> 56.88+0j
bool-> True -> 1+0j , False-> 0+0j
str -> numeric , decimal or complex string are allowed
eg:
"10" -> 10+0j
"34.5" -> 34.5+0j
"3+56j" -> 3+56j


Operators:
-----------
assignment operator:
----------------------
=

arthimetic operators:
----------------------
+
-
*
**
/
%
//

between str and str -> only "+" operator is applicable, acts as a concatination operator
between str and int -> only "*" operator is applicable, acts as a repeteation operator

equality Operators:(returns bool)
----------------------
==
!=
>
<
>=
<=

logical operators:
-------------------
and
or
not


membership operators: (sequence/iterable) 
----------------------
in
not in

relational operators:(compares address of the objects)
----------------------
is 
not is

id() : returns address of the object.

bitwise - or(|) and(&)

short hand operators:
-----------------------
+=
-=
*=
/=
%=
//=


Mutability:
-----------
immutable datatypes:
int
float
str
bool
complex
tuple

mutable datatypes:
list
Set
dict


03-04-2021
-------------
conditional stmt/flow control stmts
 if  
 else 
elif

range:
--------
range(5) -> 0 1 2 3 4 : 0 is start(start is included), 5 is stop (stop is exculded)
range(5,13) -> 5 6 7 8 9 10 11 12 : 5 is start, 13 is stop
range(5,13,2) -> 5 7 9 11 : 5 is start, 13 is stop  and 2 is step
note:
-----
default step is 1

seq/iterables:
----
range
String
list
set
tuple
dict

 for 
 while

 for vs while:
 --------------
 for: when we know the no of iterations then we should go with for.
 while : when we don't know no if iterations ,but we know the condition then we should with while.

 break 
 continue

 else with loops:
 else will chance only when there is no any intruption in the loop.

range():
-----------
range(start,stop,step)
if start < stop, then step should be +ve
if start > stop, then step should be -ve

else , range returns nothing.


home work:
-------------
r = 6

*
# #
* * *
# # # #
* * * * *
# # # # # #


r = 5
1
2 2
3 3 3
4 4 4 4
5 5 5 5 5

5 5 5 5 5
4 4 4 4
3 3 3
2 2
1

1
1 2
1 2 3
1 2 3 4
1 2 3 4 5

5 4 3 2 1
4 3 2 1
3 2 1
2 1
1

1 2 3 4 5
1 2 3 4
1 2 3
1 2
1

5
5 4
5 4 3
5 4 3 2
5 4 3 2 1


Homework:
----------
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15

a
ab
abc
abcd
abcde

abcde
abcd
abc
ab
a

a
bb
ccc
dddd
eeeee

eeeee
dddd
ccc
bb
a

edcba
dcba
cba
ba
a

a
ba
cba
dcba
edcba

a
b c
d e f
g h i j
k l m n o

k l m n o
g h i j
d e f
b c
a

String
--------
ord() -> ord value of a char
chr() -> char corresponding to the ord

supports both +ve and -ve indexing.

we can format strings using 
1) .format()
2) f""some string {} ""

slice operator -> string[start : stop : step]
-----------------------------------------------
similar to range operations

reverse a string:
print(s[::-1])

operators on strings:
----------------------
+ -> concatination operator
* -> repeteation operator
>, <, >=, <= -> alphabetical order
==, !=

removing spaces from the string:
---------------------------------
strip() -> removes spaces from both the sides
rstrip() -> removes spaces from right hand side
lstrip()-> removes spaces from left hand side

finding substring within our string:
--------------------------------------
1)
find(substring,start,stop) -> searches from left to right and gives index of first occurance of a substring.
rfind(substring,start,stop) -> searches from right to left 

note:
------
if substring is not present then it returns -1

2)
index()
same as find but only dfferenc is it throws error if subsring is not present

counting substring in the given string:
-----------------------------------------
1)
count():
gives us count of substring. if subsgring is not present it returns 0.


replacing a string with another string:
-----------------------------------------
1)
replace(oldstr,newstr)

splitting of string:
---------------------
split(separator) -> returns list of strings.
by default it splits by spaces.


join:
----------
separator.join(pieces of string)


changing case of a string:
---------------------------
upper()
lower()
swapcase()
title() -> every first char of a string should be capital
capitalize() -> chnages first char of a statemnt to capital


 list
 Set
 Tuple
 Dict

 functions
-----------------------------
 oops 
 file 
 exceptions 

