variables

a = 10

a -> variable
= -> assignment operator
10 -> object(int)

Dynamically typed language -> python, javascript
statically type language -> java, c, c++

print()
type()

data type:
===========
numeric:
---------
1.int
2.float
3.complex 

text:
------
4.string(str) - we should enclose them in double quotes/single quotes/triple quotes
str -> sequence of characters.

5.bool -> True(1), False(0)
note: True(capital T) False(capital F)
Python is a case sensitve.

note:
-------
we can add int and bool.
internally python treats -> True as 1, Flase as 0

6.Range()
7.List
8.Tuple
9.Set
10.Dict
11.None


example:
------------
a = 10
b = 56.9
c = 2 + 8j

print(type(a))
print(type(b))
print(type(c))

o/p:
-----
<class 'int'>
<class 'float'>
<class 'complex'>

Identifiers:
---------------
names are called as Identifiers in python.
it can be a variable name, function name, module name, class name.

1.alphabets, numbers and underscore(_)
2.other than obove mentioned , we are not allowed to have in a identifier.
3.we can't have numbers at starting of an identifier.
4.we can't have keywords(reserved words) for identifiers.


comments:(ctrl + /)
---------------------
comments are for used for documentation purpose.
inactive code.

# -> place # at starting of the line.
""" data to be commmented """ 


input()
--------
to take input from the console.
this function always input as "str", it is programmers responsibilty to convert it into required data type.

print()
---------
to print on to the console.
default sep is <space>
default end is <new line>


type convertions:
------------------
to str
-------
int        -> possible
float               -> possible
complex             -> possible
bool                -> possible

to int
--------
str  -> only base 10 (numeric strings) -> possible
float -> possible(we will lose precision)
complex -> not possible
bool -> possible(True - 1, False - o)

to float
---------
bool -> possible (True - 1.0, False - 0.0)
int -> possible (45 -> 45.0)
complex -> not possible
str -> only floating types (decimal strings) -> possible

to bool
--------
int -> possible (any number(+ve or -ve) to bool except zero - True, zero - false)
float -> same as above
string -> olny empty string - false, 
note: spaces are also characters in programming. So, spaces are not empty strings.
complex -> only  0+0j -> false, any other complex numbers -> true


to complex:
------------
int -> 78 -> 78+0j
float -> 56.88 -> 56.88+0j
bool-> True -> 1+0j , False-> 0+0j
str -> numeric , decimal or complex string are allowed
eg:
"10" -> 10+0j
"34.5" -> 34.5+0j
"3+56j" -> 3+56j


Operators:
-----------
assignment operator:
----------------------
=

arthimetic operators:
----------------------
+
-
*
**
/
%
//

between str and str -> only "+" operator is applicable, acts as a concatination operator
between str and int -> only "*" operator is applicable, acts as a repeteation operator

equality Operators:(returns bool)
----------------------
==
!=
>
<
>=
<=

logical operators:
-------------------
and
or
not


membership operators: (sequence/iterable) 
----------------------
in
not in

relational operators:(compares address of the objects)
----------------------
is 
not is

id() : returns address of the object.

bitwise - or(|) and(&)

short hand operators:
-----------------------
+=
-=
*=
/=
%=
//=


Mutability:
-----------
immutable datatypes:
int
float
str
bool
complex
tuple

mutable datatypes:
list
Set
dict


03-04-2021
-------------
condecision making stmt
 if 
 elif 
 else 

 for 
 while

 break 
 continue

 list
 Set
 Tuple
 Dict

 functions
-----------------------------
 oops 
 file 
 exceptions 

